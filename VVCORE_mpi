#!/Users/temporary/anaconda3/envs/VVCORE_dynasor/bin/python
import numpy as np
import time
import argparse

# Custom dependences
from VVCORElib_mpi import save_signal, stack
from VVCORElib_mpi import compute_signal
from VVCORElib_mpi import compute_auto, stack_auto
from VVCORElib_mpi import compute_ift, stack_ift

def parser():
    """Parser of the arguments"""
    parser = argparse.ArgumentParser(description='VVCORE - autocorrelation function tool')
    parser.add_argument('-path', type=str, default='./', help='Path to the folder with trajectory')
    parser.add_argument('-i', type=str, default='data.dat', help='Input file with MD trajectory')
    parser.add_argument('-opt', type=str, default='dens cur_T cur_L', help='Program option')
    parser.add_argument('-N_frames', type=int, default=10000, help='Number of frames readed in one chunk')
    parser.add_argument('-N_auto', type=int, default=1000, help='Number of frames to autocorrelate')

    parser.add_argument('-lattice', type=str, choices = ['hcp', 'fcc', 'bcc', 'sc', 'file'], default='fcc', help='Lattice of the crystal (for none qubic set qpoints explitely in qpoint.h5 file)')
    parser.add_argument('-Nq_path', type=int, default=50, help='Number of q points to resolve (for cubic lattices) along path')
    parser.add_argument('-Nq', type=int, default=50, help='Total number of q points to resolve (for cubic lattices)')
    parser.add_argument('-a', type=float, default=None, help='Lattice constant for cubic lattices')
    parser.add_argument('-c', type=float, default=None, help='Lattice constant for hexagonal lattices')
    parser.add_argument('-M', type=str, default=None, help='Masses of the species')

    parser.add_argument('-ts', type=float, default=25, help='Timestep of the simulation in ps (10^(-12) s)')
    parser.add_argument('-wmax', type=float, default=40, help='Frequency window')
    parser.add_argument('-dw', type=float, default= 0.05, help='Frequency step')
    
    parser.add_argument('--partial', help='Option for computing all partial contributions', action='store_true')
    
    parser.add_argument('--phase_noise', help='Option for adding noise to atomic vibrations (flips the velocity of random atoms)', action='store_true')
    parser.add_argument('-noise_ind', type=int, default=0, help='Specifies to what atoms noise should be added')
    parser.add_argument('-noise_ratio', type=float, default=0.0, help='Ratio of noisy atoms')
    
    args = parser.parse_args()
    return args

if __name__ == "__main__":
    
    start_time_program = time.time()
    from mpi4py import MPI
    comm = MPI.COMM_WORLD
    
    args = parser()

    path = args.path
    traj_file = f"{path}/{args.i}"
    opts = args.opt.split()

    N = args.N_frames

    lattice = args.lattice
    Nq_path = args.Nq_path
    Nq = args.Nq
    a = args.a
    c = args.c
    
    
    
    if not isinstance(args.M, type(None)):
        M = args.M.split()
        M = {str(i+1): np.float64(M[i]) for i in range(len(M))}
    
    partial = args.partial
    
    
    phase_noise = args.phase_noise
    noise_ind = args.noise_ind
    noise_ratio = args.noise_ratio
    
    if noise_ind >= len(M.keys()):
        raise ValueError('Index of atom is out of bounds')
    
    start_time_signal = time.time()
    #################  Compute signal part  #############################################3
    res, read_time, compute_time = compute_signal(traj_file, N, Nq_path, Nq, lattice, a, c, M, opts, partial, phase_noise, noise_ind, noise_ratio, comm)

    time_signal = time.time() - start_time_signal
    start_time_comm_1 = time.time()

    for opt in opts:
        res_cur = comm.gather(res[opt], root = 0)

        if comm.rank == 0:
            res_cur = stack(res_cur)
            save_signal(res_cur, f"{path}/{opt}.h5")
            del res_cur
        res.pop(opt)


    comm.Barrier()
    time_comm_1 = time.time() - start_time_comm_1

    ############## Compute auto part ###############################################
    start_time_auto = time.time()

    N_auto = args.N_auto
    res = compute_auto(path, N, Nq, N_auto, opts, comm)

    time_auto =time.time() - start_time_auto

    ############## Save auto ######################################
    start_time_comm_2 = time.time()

    for opt in opts:
        res_cur = comm.gather(res[opt], root = 0)
        if comm.rank == 0:
            if comm.size > Nq:
                res_cur = stack_auto(Nq, N//N_auto, res_cur)
            else:
                res_cur = stack(res_cur, dim = 1)
            save_signal(res_cur, f"{path}/auto_{opt}.h5")
            del res_cur
        res.pop(opt)

    comm.Barrier()
    time_comm_2 = time.time() - start_time_comm_2

    ############## Compute ift part ###############################################
    start_time_ift = time.time()

    wmax = args.wmax
    dw = args.dw
    ts = args.ts

    res = compute_ift(path, N_auto, Nq, ts, wmax, dw, opts, comm)

    time_ift = time.time() - start_time_ift


    ############# Save ift #########################
    start_time_comm_3 = time.time()

    for opt in opts:
        res_cur = comm.gather(res[opt], root = 0)
        if comm.rank == 0:
            if comm.size > Nq:
                res_cur = stack_ift(Nq, int(wmax/dw), res_cur, comm)
            else:
                res_cur = stack(res_cur, dim = 1)
            save_signal(res_cur, f"{path}/spec_{opt}.h5")
            del res_cur
        res.pop(opt)

    comm.Barrier()
    time_comm_3 = time.time() - start_time_comm_3
    time_program = time.time() - start_time_program

    # Reduce timing
    time_proc = np.array([time_comm_1 + time_comm_2 + time_comm_3, time_signal, time_auto, time_ift, time_program, read_time, compute_time], dtype='d')

    if comm.rank == 0:
        time_total = np.zeros_like(time_proc)
    else:
        time_total = None

    comm.Reduce([time_proc, MPI.DOUBLE], [time_total, MPI.DOUBLE], op=MPI.SUM, root=0)

    if comm.rank == 0:
        time_total /= comm.size
        print(f"Total time SIGNAL = {time_total[1]}")
        print(f"\nTotal time READ = {time_total[-2]}")
        print(f"Total time COMPUTE = {time_total[-1]}\n")
        print(f"Total time AUTO = {time_total[2]}")
        print(f"Total time IFT = {time_total[3]}")
        print(f"Total time PROGRAM = {time_total[4]}")
        print(f"Total time COMM = {time_total[0]}")
